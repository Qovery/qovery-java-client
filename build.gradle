plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

group 'com.qovery'
version '0.1.0'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'com.eclipsesource.minimal-json', name: 'minimal-json', version: '0.9.5'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

test {
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId 'com.qovery'
            artifactId 'client'
            version '0.1.0'

            from components.java

            // create the sign pom artifact
            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }

            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'Retrieve information from Qovery'
            name 'Qovery Java Client'
            url 'https://github.com/Qovery/qovery-java-sdk'
            organization {
                name 'com.github.qovery'
                url 'https://github.com/Qovery'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/Qovery/qovery-java-sdk/issues'
            }
            licenses {
                license {
                    name 'Apache License 2.0'
                    url 'https://github.com/Qovery/qovery-java-sdk/blob/master/LICENSE'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/Qovery/qovery-java-sdk'
                connection 'scm:git:git://github.com/Qovery/qovery-java-sdk.git'
                developerConnection 'scm:git:ssh://git@github.com:Qovery/qovery-java-sdk.git'
            }
            developers {
                developer {
                    name 'evoxmusic'
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}
